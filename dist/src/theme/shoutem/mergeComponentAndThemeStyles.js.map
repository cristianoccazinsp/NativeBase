{"version":3,"sources":["../../../../src/theme/shoutem/mergeComponentAndThemeStyles.js"],"names":["mergeComponentAndThemeStyles","_","componentStyle","themeComponentStyle","themeStyle","componentThemedStyle","merge","intersectedRootThemeStyle","pick","keys"],"mappings":"yEAEwBA,4B,CAFxB,8B,GAAYC,E,4QAEG,QAASD,6BAAT,CACbE,cADa,CACGC,mBADH,CACwBC,UADxB,CACoC,CACjD,GAAMC,sBAAuBJ,EAAEK,KAAF,CAAQ,EAAR,CAAYJ,cAAZ,CAA4BC,mBAA5B,CAA7B,CAIA,GAAMI,2BAA4BN,EAAEO,IAAF,CAAOJ,UAAP,CAAmBH,EAAEQ,IAAF,CAAOJ,oBAAP,CAAnB,CAAlC,CAGA,MAAOJ,GAAEK,KAAF,CAAQ,EAAR,CAAYC,yBAAZ,CAAuCF,oBAAvC,CAAP,CACD","file":"mergeComponentAndThemeStyles.js","sourcesContent":["import * as _ from 'lodash';\n\nexport default function mergeComponentAndThemeStyles(\n  componentStyle, themeComponentStyle, themeStyle) {\n  const componentThemedStyle = _.merge({}, componentStyle, themeComponentStyle);\n\n  // Picking only required root theme style, used by component.\n  // We do not want to merge whole theme to component style.\n  const intersectedRootThemeStyle = _.pick(themeStyle, _.keys(componentThemedStyle));\n\n  // Merging only common style, not all theme style with component style\n  return _.merge({}, intersectedRootThemeStyle, componentThemedStyle);\n}\n"]}