{"version":3,"sources":["../../../../src/theme/shoutem/connectStyle.js"],"names":["clearThemeCache","_","themeCache","throwConnectStyleError","errorMessage","componentDisplayName","Error","getTheme","context","theme","Theme","getDefaultTheme","isStyleVariant","propertyName","test","isChildStyle","getConcreteStyle","style","pickBy","value","key","componentStyleName","componentStyle","mapPropsToStyleNames","options","getComponentDisplayName","WrappedComponent","displayName","name","wrapWithStyledComponent","isPlainObject","isString","StyledComponent","props","styleNames","getStyleNames","finalStyle","getFinalStyle","setWrappedInstance","bind","resolveConnectedComponentStyle","state","addedProps","resolveAddedProps","resolvedStyle","parentPath","getOrSetStylesInCache","resolveStyle","concreteStyle","merge","isArray","styleNamesArr","map","remove","index","getParentPath","nextProps","nextContext","shouldRebuildStyle","setState","nativeProps","wrappedInstance","setNativeProps","component","_root","isEqual","styleName","hasStyleNameChanged","split","uniq","withRef","ref","path","join","Object","keys","length","parentStyle","themeStyle","createComponentStyle","resolveStyleNames","React","Component","contextTypes","ThemeShape","PropTypes","array","childContextTypes","propTypes","oneOfType","object","number","string","virtual","bool","defaultProps"],"mappings":"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","file":"connectStyle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\n\nimport Theme, { ThemeShape } from \"./Theme\";\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\n\nlet themeCache = {};\n\n/**\n * clear theme cache\n * @export\n */\nexport function clearThemeCache() {\n  themeCache = {};\n}\n\n/**\n * Formats and throws an error when connecting component style with the theme.\n *\n * @param errorMessage The error message.\n * @param componentDisplayName The name of the component that is being connected.\n */\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(\n    `${errorMessage} - when connecting ${componentDisplayName} component to style.`\n  );\n}\n\n/**\n * Returns the theme object from the provided context,\n * or an empty theme if the context doesn't contain a theme.\n *\n * @param context The React component context.\n * @returns {Theme} The Theme object.\n */\nfunction getTheme(context) {\n  // Fallback to a default theme if the component isn't\n  // rendered in a StyleProvider.\n  return context.theme || Theme.getDefaultTheme();\n}\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction getConcreteStyle(style) {\n  return _.pickBy(style, (value, key) => {\n    return !isStyleVariant(key) && !isChildStyle(key);\n  });\n}\n\n/**\n * Resolves the final component style by using the theme style, if available and\n * merging it with the style provided directly through the style prop, and style\n * variants applied through the styleName prop.\n *\n * @param componentStyleName The component name that will be used\n * to target this component in style rules.\n * @param componentStyle The default component style.\n * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.\n * @param options The additional connectStyle options\n * @param options.virtual The default value of the virtual prop\n * @param options.withRef Create component ref with addedProps; if true, ref name is wrappedInstance\n * @returns {StyledComponent} The new component that will handle\n * the styling of the wrapped component.\n */\nexport default (\n  componentStyleName,\n  componentStyle = {},\n  mapPropsToStyleNames,\n  options = {}\n) => {\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  }\n\n  return function wrapWithStyledComponent(WrappedComponent) {\n    const componentDisplayName = getComponentDisplayName(WrappedComponent);\n\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\n        \"Component style must be plain object\",\n        componentDisplayName\n      );\n    }\n\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\n        \"Component Style Name must be string\",\n        componentDisplayName\n      );\n    }\n\n    class StyledComponent extends React.Component {\n      static contextTypes = {\n        theme: ThemeShape,\n        // The style inherited from the parent\n        // parentStyle: PropTypes.object,\n        parentPath: PropTypes.array\n      };\n\n      static childContextTypes = {\n        // Provide the parent style to child components\n        // parentStyle: PropTypes.object,\n        // resolveStyle: PropTypes.func,\n        parentPath: PropTypes.array\n      };\n\n      static propTypes = {\n        // Element style that overrides any other style of the component\n        style: PropTypes.oneOfType([\n          PropTypes.object,\n          PropTypes.number,\n          PropTypes.array\n        ]),\n        // The style variant names to apply to this component,\n        // multiple variants may be separated with a space character\n        styleName: PropTypes.string,\n        // Virtual elements will propagate the parent\n        // style to their children, i.e., the children\n        // will behave as they are placed directly below\n        // the parent of a virtual element.\n        virtual: PropTypes.bool\n      };\n\n      static defaultProps = {\n        virtual: options.virtual\n      };\n\n      static displayName = `Styled(${componentDisplayName})`;\n      static WrappedComponent = WrappedComponent;\n\n      constructor(props, context) {\n        super(props, context);\n        // console.log(context.parentPath);\n        const styleNames = this.getStyleNames(props);\n        const style = props.style;\n\n        const finalStyle = this.getFinalStyle(\n          props,\n          context,\n          style,\n          styleNames\n        );\n\n        this.setWrappedInstance = this.setWrappedInstance.bind(this);\n        this.resolveConnectedComponentStyle = this.resolveConnectedComponentStyle.bind(\n          this\n        );\n        this.state = {\n          style: finalStyle,\n          // AddedProps are additional WrappedComponent props\n          // Usually they are set trough alternative ways,\n          // such as theme style, or trough options\n          addedProps: this.resolveAddedProps(),\n          styleNames\n        };\n      }\n\n      getFinalStyle(props, context, style, styleNames) {\n        let resolvedStyle = {};\n        if (context.parentPath) {\n          resolvedStyle = this.getOrSetStylesInCache(\n            context,\n            props,\n            styleNames,\n            [...context.parentPath, componentStyleName, ...styleNames]\n          );\n        } else {\n          resolvedStyle = this.resolveStyle(context, props, styleNames);\n          themeCache[componentStyleName] = resolvedStyle;\n        }\n\n        const concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\n\n        if (_.isArray(style)) {\n          return [concreteStyle, ...style];\n        }\n\n        if (typeof style === \"number\" || typeof style === \"object\") {\n          return [concreteStyle, style];\n        }\n\n        return concreteStyle;\n      }\n\n      getStyleNames(props) {\n        const styleNamesArr = _.map(props, (value, key) => {\n          if (typeof value !== \"object\" && value === true) {\n            return \".\" + key;\n          } else {\n            return false;\n          }\n        });\n        _.remove(styleNamesArr, (value, index) => {\n          return value === false;\n        });\n\n        return styleNamesArr;\n      }\n\n      getParentPath() {\n        if (!this.context.parentPath) {\n          return [componentStyleName];\n        } else {\n          return [\n            ...this.context.parentPath,\n            componentStyleName,\n            ...this.getStyleNames(this.props)\n          ];\n        }\n      }\n\n      getChildContext() {\n        return {\n          // parentStyle: this.props.virtual ?\n          //   this.context.parentStyle :\n          //   this.state.childrenStyle,\n          // resolveStyle: this.resolveConnectedComponentStyle,\n          parentPath: this.getParentPath()\n        };\n      }\n\n      UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n        const styleNames = this.getStyleNames(nextProps);\n        const style = nextProps.style;\n        if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n          const finalStyle = this.getFinalStyle(\n            nextProps,\n            nextContext,\n            style,\n            styleNames\n          );\n\n          this.setState({\n            style: finalStyle,\n            // childrenStyle: resolvedStyle.childrenStyle,\n            styleNames\n          });\n        }\n      }\n\n      setNativeProps(nativeProps) {\n        if (this.wrappedInstance.setNativeProps) {\n          this.wrappedInstance.setNativeProps(nativeProps);\n        }\n      }\n\n      setWrappedInstance(component) {\n        if (component && component._root) {\n          this._root = component._root;\n        } else {\n          this._root = component;\n        }\n        this.wrappedInstance = this._root;\n      }\n\n      hasStyleNameChanged(nextProps, styleNames) {\n        return (\n          mapPropsToStyleNames &&\n          this.props !== nextProps &&\n          // Even though props did change here,\n          // it doesn't necessary means changed props are those which affect styleName\n          !_.isEqual(this.state.styleNames, styleNames)\n        );\n      }\n\n      shouldRebuildStyle(nextProps, nextContext, styleNames) {\n        return (\n          nextProps.style !== this.props.style ||\n          nextProps.styleName !== this.props.styleName ||\n          nextContext.theme !== this.context.theme ||\n          !_.isEqual(nextContext.parentPath, this.context.parentPath) ||\n          this.hasStyleNameChanged(nextProps, styleNames)\n        );\n      }\n\n      resolveStyleNames(props) {\n        const { styleName } = props;\n        const styleNames = styleName ? styleName.split(/\\s/g) : [];\n\n        if (!mapPropsToStyleNames) {\n          return styleNames;\n        }\n\n        // We only want to keep the unique style names\n        return _.uniq(mapPropsToStyleNames(styleNames, props));\n      }\n\n      resolveAddedProps() {\n        const addedProps = {};\n        if (options.withRef) {\n          addedProps.ref = \"wrappedInstance\";\n        }\n        return addedProps;\n      }\n\n      getOrSetStylesInCache(context, props, styleNames, path) {\n        if (themeCache && themeCache[path.join(\">\")]) {\n          // console.log('**************');\n\n          return themeCache[path.join(\">\")];\n        } else {\n          const resolvedStyle = this.resolveStyle(context, props, styleNames);\n          if (Object.keys(themeCache).length < 10000) {\n            themeCache[path.join(\">\")] = resolvedStyle;\n          }\n          return resolvedStyle;\n        }\n      }\n\n      resolveStyle(context, props, styleNames) {\n        let parentStyle = {};\n\n        const theme = getTheme(context);\n        const themeStyle = theme.createComponentStyle(\n          componentStyleName,\n          componentStyle\n        );\n\n        if (context.parentPath) {\n          parentStyle = themeCache[context.parentPath.join(\">\")];\n        } else {\n          parentStyle = resolveComponentStyle(\n            componentStyleName,\n            styleNames,\n            themeStyle,\n            parentStyle\n          );\n        }\n\n        return resolveComponentStyle(\n          componentStyleName,\n          styleNames,\n          themeStyle,\n          parentStyle\n        );\n      }\n\n      /**\n       * A helper function provided to child components that enables\n       * them to resolve their style for any set of prop values.\n       *\n       * @param props The component props to use to resolve the style values.\n       * @returns {*} The resolved component style.\n       */\n      resolveConnectedComponentStyle(props) {\n        const styleNames = this.resolveStyleNames(props);\n        return this.resolveStyle(this.context, props, styleNames)\n          .componentStyle;\n      }\n\n      render() {\n        // console.log('themeCache', themeCache);\n\n        // if(componentStyleName == 'NativeBase.Text') {\n        //   console.log(this.state.style);\n        //   console.log(themeCache);\n        // }\n\n        const { addedProps, style } = this.state;\n        return (\n          <WrappedComponent\n            {...this.props}\n            {...addedProps}\n            style={style}\n            ref={this.setWrappedInstance}\n          />\n        );\n      }\n    }\n\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n};\n"]}