{"version":3,"sources":["../../../../../src/theme/shoutem/StyleNormalizer/StyleNormalizer.js"],"names":["StyleNormalizer","normalizers","createNormalizers","HORIZONTAL","VERTICAL","SIDES","prop","shorthands","suffix","forEach","propName","shorthand","type","normalizerExists","Error","ShorthandsNormalizerFactory","createNormalizer","normalizerName","val"],"mappings":"ujBAAA,0E,8TAUqBA,gB,YACnB,0BAAc,uCACZ,KAAKC,WAAL,CAAmB,EAAnB,CACA,KAAKC,iBAAL,CAAuB,QAAvB,CAAiC,CAACC,uCAAD,CAAaC,qCAAb,CAAuBC,kCAAvB,CAAjC,EACA,KAAKH,iBAAL,CAAuB,SAAvB,CAAkC,CAACC,uCAAD,CAAaC,qCAAb,CAAuBC,kCAAvB,CAAlC,EACA,KAAKH,iBAAL,CAAuB,QAAvB,CAAiC,CAACG,kCAAD,CAAjC,CAA0C,OAA1C,EACD,C,wFAEiBC,I,CAAMC,U,CAAyB,mBAAbC,OAAa,2DAAJ,EAAI,CAC/CD,WAAWE,OAAX,CAAmB,mBAAa,CAC9B,GAAMC,UAAWJ,KAAOK,UAAUC,IAAjB,CAAwBJ,MAAzC,CAEA,GAAI,MAAKK,gBAAL,CAAsBH,QAAtB,CAAJ,CAAqC,CACnC,KAAMI,2BAAyBJ,QAAzB,+BAAN,CACD,CAED,MAAKT,WAAL,CAAiBS,QAAjB,EACEK,sCAA4BC,gBAA5B,CAA6CV,IAA7C,CAAmDK,SAAnD,CAA8DH,MAA9D,CADF,CAED,CATD,EAUD,C,0DAEgBS,c,CAAgB,CAC/B,MAAO,CAAC,CAAC,KAAKhB,WAAL,CAAiBgB,cAAjB,CAAT,CACD,C,kDAEYX,I,CAAM,CACjB,MAAO,MAAKO,gBAAL,CAAsBP,IAAtB,CAAP,CACD,C,4CAESA,I,CAAMY,G,CAAK,CACnB,MAAO,MAAKjB,WAAL,CAAiBK,IAAjB,EAAuBY,GAAvB,CAAP,CACD,C,+CA/BkBlB,e","file":"StyleNormalizer.js","sourcesContent":["import ShorthandsNormalizerFactory, {\n  SIDES,\n  HORIZONTAL,\n  VERTICAL,\n} from './ShorthandsNormalizerFactory';\n\n/**\n * Style Normalizer uses ShorthandsNormalizerCreators to creates different normalizers\n * specific to properties.\n */\nexport default class StyleNormalizer {\n  constructor() {\n    this.normalizers = {};\n    this.createNormalizers('margin', [HORIZONTAL, VERTICAL, SIDES]);\n    this.createNormalizers('padding', [HORIZONTAL, VERTICAL, SIDES]);\n    this.createNormalizers('border', [SIDES], 'Width');\n  }\n\n  createNormalizers(prop, shorthands, suffix = '') {\n    shorthands.forEach(shorthand => {\n      const propName = prop + shorthand.type + suffix;\n\n      if (this.normalizerExists(propName)) {\n        throw Error(`Normalizer for '${propName}' shorthand already exists`);\n      }\n\n      this.normalizers[propName] =\n        ShorthandsNormalizerFactory.createNormalizer(prop, shorthand, suffix);\n    });\n  }\n\n  normalizerExists(normalizerName) {\n    return !!this.normalizers[normalizerName];\n  }\n\n  canNormalize(prop) {\n    return this.normalizerExists(prop);\n  }\n\n  normalize(prop, val) {\n    return this.normalizers[prop](val);\n  }\n}\n"]}