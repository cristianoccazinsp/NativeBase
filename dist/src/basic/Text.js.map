{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","c","_root","props","uppercase","children","text","React","Children","map","child","_","isString","toUpper","setRoot","PureComponent","propTypes","RNText","PropTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText","mapPropsToStyleNames"],"mappings":"0sBAAA,oDACA,6DACA,yCACA,sDAEA,yCACA,2F,uzBAEMA,CAAAA,I,kQACJ,iBAAQC,CAAR,CAAW,CACT,KAAKC,KAAL,CAAaD,CAAb,CACD,C,sBAED,iBAAS,CACP,gBAA8B,KAAKE,KAAnC,CAAOC,SAAP,aAAOA,SAAP,CAAkBC,QAAlB,aAAkBA,QAAlB,CAEA,GAAIC,CAAAA,IAAJ,CACA,GAAIF,SAAJ,CAAe,CACbE,IAAI,CAAGC,eAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,CAA6B,SAACK,KAAD,CAAW,CAC7C,GAAIC,gBAAEC,QAAF,CAAWF,KAAX,CAAJ,CAAuB,CACrB,MAAOC,iBAAEE,OAAF,CAAUH,KAAV,CAAP,CACD,CACD,MAAOA,CAAAA,KAAP,CACD,CALM,CAAP,CAMD,CAPD,IAOO,CACLJ,IAAI,CAAGD,QAAP,CACD,CAED,MACE,8BAAC,iBAAD,wBAAQ,GAAG,CAAE,KAAKS,OAAlB,EAA+B,KAAKX,KAApC,8EACGG,IADH,CADF,CAKD,C,kBAzBgBC,eAAMQ,a,EA4BzBf,IAAI,CAACgB,SAAL,0BACKC,kBAAOD,SADZ,EAEEZ,SAAS,CAAEc,mBAAUC,IAFvB,CAGEC,KAAK,CAAEF,mBAAUG,SAAV,CAAoB,CACzBH,mBAAUI,MADe,CAEzBJ,mBAAUK,MAFe,CAGzBL,mBAAUM,KAHe,CAApB,CAHT,GAUAxB,IAAI,CAACyB,YAAL,CAAoB,CAClBrB,SAAS,CAAE,KADO,CAApB,CAIA,GAAMsB,CAAAA,UAAU,CAAG,0BACjB,iBADiB,CAEjB,EAFiB,CAGjBC,6BAHiB,EAIjB3B,IAJiB,CAAnB,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Text as RNText} from 'react-native';\nimport _ from 'lodash';\n\nimport {connectStyle} from '../theme/shoutem';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nclass Text extends React.PureComponent {\n  setRoot(c) {\n    this._root = c;\n  }\n\n  render() {\n    const {uppercase, children} = this.props;\n\n    let text;\n    if (uppercase) {\n      text = React.Children.map(children, (child) => {\n        if (_.isString(child)) {\n          return _.toUpper(child);\n        }\n        return child;\n      });\n    } else {\n      text = children;\n    }\n\n    return (\n      <RNText ref={this.setRoot} {...this.props}>\n        {text}\n      </RNText>\n    );\n  }\n}\n\nText.propTypes = {\n  ...RNText.propTypes,\n  uppercase: PropTypes.bool,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array,\n  ]),\n};\n\nText.defaultProps = {\n  uppercase: false,\n};\n\nconst StyledText = connectStyle(\n  'NativeBase.Text',\n  {},\n  mapPropsToStyleNames,\n)(Text);\n\nexport {StyledText as Text};\n"],"file":"Text.js"}