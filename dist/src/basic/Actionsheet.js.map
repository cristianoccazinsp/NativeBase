{"version":3,"sources":["../../../src/basic/Actionsheet.js"],"names":["ActionSheetContainer","config","callback","inst","Root","getActionSheetInstance","_root","showActionSheet","hideActionSheet","props","state","modalVisible","items","autoHide","duration","console","warn","Platform","OS","PLATFORM","IOS","options","filtered","map","item","text","filteredConfig","ActionSheetIOS","showActionSheetWithOptions","setState","title","message","destructiveButtonIndex","cancelButtonIndex","styles","containerTouchable","innerTouchable","touchableText","flatList","marginTop","commonColor","index","String","parseInt","listItem","height","listItemHeight","icon","iconType","color","iconColor","undefined","listItemBody","Component","propTypes","ViewPropTypes","StyleSheet","create","backgroundColor","containerTouchableBackgroundColor","flex","justifyContent","marginHorizontal","innerTouchableBackgroundColor","minHeight","maxHeight","Dimensions","get","padding","elevation","borderColor","listItemBorderColor","marginLeft","paddingLeft","touchableTextColor","StyledActionSheetContainer","mapPropsToStyleNames"],"mappings":"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","file":"Actionsheet.js","sourcesContent":["/* eslint-disable no-use-before-define */\n/* eslint-disable radix */\n\nimport React, { Component } from 'react';\nimport {\n  ActionSheetIOS,\n  Dimensions,\n  FlatList,\n  Modal,\n  Platform,\n  TouchableOpacity,\n  StyleSheet,\n  ViewPropTypes\n} from 'react-native';\n\nimport { connectStyle } from '../theme/shoutem';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport commonColor, { PLATFORM } from '../theme/variables/commonColor';\n\nimport { Text } from './Text';\nimport { Icon } from './Icon';\nimport { Left } from './Left';\nimport { Right } from './Right';\nimport { Body } from './Body';\nimport { ListItem } from './ListItem';\nimport { Root } from './Root';\n\n\nclass ActionSheetContainer extends Component {\n  static show(config, callback) {\n    const inst = Root.getActionSheetInstance();\n    if(inst){\n      inst._root.showActionSheet(config, callback);\n    }\n  }\n  static hide() {\n    const inst = Root.getActionSheetInstance();\n    if(inst){\n      inst._root.hideActionSheet();\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.autoHide && this.props.duration) {\n      // eslint-disable-next-line no-console\n      console.warn(`It's not recommended to set autoHide false with duration`);\n    }\n  }\n\n  showActionSheet(config, callback) {\n    if (Platform.OS === PLATFORM.IOS) {\n      if (typeof config.options[0] === 'object') {\n        const options = config.options;\n        const filtered = options.map(item => {\n          return item.text;\n        });\n\n        const filteredConfig = { ...config, options: filtered };\n        ActionSheetIOS.showActionSheetWithOptions(filteredConfig, callback);\n      } else {\n        ActionSheetIOS.showActionSheetWithOptions(config, callback);\n      }\n    } else {\n      this.setState({\n        items: config.options,\n        title: config.title,\n        message: config.message,\n        destructiveButtonIndex: config.destructiveButtonIndex,\n        cancelButtonIndex: config.cancelButtonIndex,\n        modalVisible: true,\n        callback\n      });\n    }\n  }\n\n  hideActionSheet() {\n    this.setState({ modalVisible: false });\n  }\n\n  render() {\n    return (\n      <Modal\n        animationType={'fade'}\n        transparent\n        visible={this.state.modalVisible}\n        onRequestClose={() => {\n          this.state.callback(this.state.cancelButtonIndex);\n          this.setState({ modalVisible: false });\n        }}\n      >\n        <TouchableOpacity\n          activeOpacity={1}\n          onPress={() => {\n            this.state.callback(this.state.cancelButtonIndex);\n            this.setState({ modalVisible: false });\n          }}\n          style={styles.containerTouchable}\n        >\n          <TouchableOpacity activeOpacity={1} style={styles.innerTouchable}>\n            {this.state.title ? (\n              <Text style={styles.touchableText}>{this.state.title}</Text>\n            ) : null}\n            <FlatList\n              style={[\n                styles.flatList,\n                { marginTop: this.state.title ? commonColor.marginTop : 0 }\n              ]}\n              data={this.state.items}\n              keyExtractor={(item, index) => String(index)}\n              renderItem={({ index, item }) => {\n                return typeof this.state.items[0] === 'string' ? (\n                  <ListItem\n                    onPress={() => {\n                      this.state.callback(parseInt(index));\n                      this.setState({ modalVisible: false });\n                    }}\n                    style={styles.listItem}\n                  >\n                    <Text>{item}</Text>\n                  </ListItem>\n                ) : (\n                  <ListItem\n                    onPress={() => {\n                      this.state.callback(parseInt(index));\n                      this.setState({ modalVisible: false });\n                    }}\n                    style={[\n                      styles.listItem,\n                      {\n                        height: commonColor.listItemHeight\n                      }\n                    ]}\n                    icon\n                  >\n                    <Left>\n                      <Icon\n                        name={item.icon}\n                        type={item.iconType}\n                        style={{\n                          color: item.iconColor ? item.iconColor : undefined\n                        }}\n                      />\n                    </Left>\n                    <Body style={styles.listItemBody}>\n                      <Text>{item.text}</Text>\n                    </Body>\n                    <Right />\n                  </ListItem>\n                );\n              }}\n            />\n          </TouchableOpacity>\n        </TouchableOpacity>\n      </Modal>\n    );\n  }\n}\n\nActionSheetContainer.propTypes = {\n  ...ViewPropTypes\n};\n\nconst styles = StyleSheet.create({\n  containerTouchable: {\n    backgroundColor: commonColor.containerTouchableBackgroundColor,\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  flatList: {\n    marginHorizontal: commonColor.marginHorizontal\n  },\n  innerTouchable: {\n    backgroundColor: commonColor.innerTouchableBackgroundColor,\n    minHeight: commonColor.minHeight,\n    maxHeight: Dimensions.get('window').height / 2,\n    padding: commonColor.padding,\n    elevation: commonColor.elevation\n  },\n  listItem: {\n    borderColor: commonColor.listItemBorderColor,\n    marginLeft: commonColor.marginLeft\n  },\n  listItemBody: {\n    borderColor: commonColor.listItemBorderColor,\n    paddingLeft: commonColor.marginLeft / 2\n  },\n  touchableText: {\n    color: commonColor.touchableTextColor\n  }\n});\n\nconst StyledActionSheetContainer = connectStyle(\n  'NativeBase.ActionSheetContainer',\n  {},\n  mapPropsToStyleNames\n)(ActionSheetContainer);\n\nexport { StyledActionSheetContainer as ActionSheetContainer };\n"]}