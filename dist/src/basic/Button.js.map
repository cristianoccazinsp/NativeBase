{"version":3,"sources":["../../../src/basic/Button.js"],"names":["IS_IOS","Platform","OS","IS_WEB","Button","c","_root","borderedBtn","borderWidth","props","bordered","variable","buttonDefaultBorderWidth","undefined","borderRadius","rounded","borderRadiusLarge","buttonDefaultBorderRadius","style","others","StyleSheet","flatten","compose","getInitialStyle","variables","context","theme","children","buttonUppercaseAndroidText","React","Children","map","child","type","Text","cloneElement","uppercase","rootProps","prepareRootProps","androidRipple","Version","setRoot","activeOpacity","buttonDefaultActiveOpacity","buttonStyle","buttonFlex","full","block","buttonDefaultFlex","flex","maxHeight","height","paddingTop","paddingBottom","TouchableNativeFeedback","Ripple","androidRippleColor","styles","childContainer","flexGrow","onPress","transparent","PureComponent","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","success","danger","warning","info","disabled","large","small","active","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableOpacity,\n  Platform,\n  View,\n  TouchableNativeFeedback,\n  StyleSheet,\n} from 'react-native';\n\nimport {connectStyle} from '../theme/shoutem';\nimport variable from '../theme/variables/platform';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nimport {Text} from './Text';\n\nconst IS_IOS = Platform.OS === 'ios';\nconst IS_WEB = Platform.OS === 'web';\n\nclass Button extends React.PureComponent {\n  static contextTypes = {\n    theme: PropTypes.object,\n  };\n\n  setRoot(c) {\n    this._root = c;\n  }\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: this.props.bordered\n          ? variable.buttonDefaultBorderWidth\n          : undefined,\n        borderRadius:\n          this.props.rounded && this.props.bordered\n            ? variable.borderRadiusLarge\n            : variable.buttonDefaultBorderRadius,\n      },\n    };\n  }\n\n  prepareRootProps() {\n    const {style, ...others} = this.props;\n\n    return {\n      style: StyleSheet.flatten(\n        StyleSheet.compose(this.getInitialStyle().borderedBtn, style),\n      ),\n      ...others,\n    };\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    const children =\n      IS_IOS || !variables.buttonUppercaseAndroidText\n        ? this.props.children\n        : React.Children.map(this.props.children, (child) =>\n            child && child.type === Text\n              ? React.cloneElement(child, {\n                  uppercase: true,\n                  ...child.props,\n                })\n              : child,\n          );\n\n    const rootProps = this.prepareRootProps();\n\n    if (\n      IS_IOS ||\n      IS_WEB ||\n      variables.androidRipple === false ||\n      Platform.Version < 21\n    ) {\n      return (\n        <TouchableOpacity\n          {...rootProps}\n          ref={this.setRoot}\n          activeOpacity={\n            this.props.activeOpacity > 0\n              ? this.props.activeOpacity\n              : variable.buttonDefaultActiveOpacity\n          }>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n    if (this.props.rounded) {\n      const buttonStyle = {...rootProps.style};\n      const buttonFlex =\n        this.props.full || this.props.block\n          ? variable.buttonDefaultFlex\n          : buttonStyle.flex;\n      return (\n        <View\n          style={[\n            {maxHeight: buttonStyle.height},\n            buttonStyle,\n            {paddingTop: undefined, paddingBottom: undefined},\n          ]}>\n          <TouchableNativeFeedback\n            ref={this.setRoot}\n            background={TouchableNativeFeedback.Ripple(\n              this.props.androidRippleColor || variables.androidRippleColor,\n              true,\n            )}\n            {...rootProps}>\n            <View\n              style={[\n                styles.childContainer,\n                {\n                  paddingTop: buttonStyle.paddingTop,\n                  paddingBottom: buttonStyle.paddingBottom,\n                  height: buttonStyle.height,\n                  flexGrow: buttonFlex,\n                },\n              ]}>\n              {children}\n            </View>\n          </TouchableNativeFeedback>\n        </View>\n      );\n    }\n    return (\n      <TouchableNativeFeedback\n        ref={this.setRoot}\n        onPress={this.props.onPress}\n        background={\n          this.props.transparent\n            ? TouchableNativeFeedback.Ripple('transparent')\n            : TouchableNativeFeedback.Ripple(\n                variables.androidRippleColor,\n                false,\n              )\n        }\n        {...rootProps}>\n        <View {...rootProps}>{children}</View>\n      </TouchableNativeFeedback>\n    );\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array,\n  ]),\n  block: PropTypes.bool,\n  primary: PropTypes.bool,\n  transparent: PropTypes.bool,\n  success: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  bordered: PropTypes.bool,\n  disabled: PropTypes.bool,\n  rounded: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  active: PropTypes.bool,\n};\n\nconst styles = StyleSheet.create({\n  childContainer: {\n    flexShrink: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst StyledButton = connectStyle(\n  'NativeBase.Button',\n  {},\n  mapPropsToStyleNames,\n)(Button);\nexport {StyledButton as Button};\n"],"file":"Button.js"}