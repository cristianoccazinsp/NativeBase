{"version":3,"sources":["../../../src/basic/Button.js"],"names":["IS_IOS","Platform","OS","IS_WEB","Button","c","_root","borderedBtn","borderWidth","props","bordered","variable","buttonDefaultBorderWidth","undefined","borderRadius","rounded","borderRadiusLarge","buttonDefaultBorderRadius","style","others","StyleSheet","flatten","compose","getInitialStyle","variables","context","theme","children","buttonUppercaseAndroidText","React","Children","map","child","type","Text","cloneElement","uppercase","rootProps","prepareRootProps","androidRipple","Version","setRoot","activeOpacity","buttonDefaultActiveOpacity","buttonStyle","buttonFlex","full","block","buttonDefaultFlex","flex","maxHeight","height","paddingTop","paddingBottom","TouchableNativeFeedback","Ripple","androidRippleColor","styles","childContainer","flexGrow","onPress","transparent","PureComponent","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","success","danger","warning","info","disabled","large","small","active","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"u1BACA,4B,2CACA,qC,mDACA,yCAQA,yCACA,qD,iDACA,mE,yEAEA,4B,skCAGA,GAAMA,QAASC,sBAASC,EAAT,GAAgB,KAA/B,CACA,GAAMC,QAASF,sBAASC,EAAT,EAAe,KAA9B,C,GAGME,O,kSAKIC,C,CAAE,CACR,KAAKC,KAAL,CAAaD,CAAb,CACD,C,yDAEiB,CAChB,MAAO,CACLE,YAAa,CACXC,YAAa,KAAKC,KAAL,CAAWC,QAAX,CACTC,mBAASC,wBADA,CAETC,SAHO,CAIXC,aACE,KAAKL,KAAL,CAAWM,OAAX,EAAsB,KAAKN,KAAL,CAAWC,QAAjC,CACIC,mBAASK,iBADb,CAEIL,mBAASM,yBAPJ,CADR,CAAP,CAWD,C,2DAEkB,YAEU,KAAKR,KAFf,CAEVS,KAFU,QAEVA,KAFU,CAEAC,MAFA,4CAIjB,iBACED,MAAOE,wBAAWC,OAAX,CAAmBD,wBAAWE,OAAX,CAAmB,KAAKC,eAAL,GAAuBhB,WAA1C,CAAuDW,KAAvD,CAAnB,CADT,EAEKC,MAFL,EAKD,C,uCAEQ,CACP,GAAMK,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdb,kBAFJ,CAIA,GAAMgB,UACJ3B,QAAU,CAACwB,UAAUI,0BAArB,CACI,KAAKnB,KAAL,CAAWkB,QADf,CAEIE,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKtB,KAAL,CAAWkB,QAA9B,CAAwC,sBACtCK,QAASA,MAAMC,IAAN,GAAeC,UAAxB,CACIL,gBAAMM,YAAN,CAAmBH,KAAnB,WACAI,UAAW,IADX,EAEGJ,MAAMvB,KAFT,EADJ,CAKIuB,KANkC,EAAxC,CAHN,CAYA,GAAMK,WAAY,KAAKC,gBAAL,EAAlB,CAEA,GACEtC,QACAG,MADA,EAEAqB,UAAUe,aAAV,GAA4B,KAF5B,EAGAtC,sBAASuC,OAAT,CAAmB,EAJrB,CAKE,CACA,MACE,+BAAC,6BAAD,aACMH,SADN,EAEE,IAAK,KAAKI,OAFZ,CAGE,cACE,KAAKhC,KAAL,CAAWiC,aAAX,CAA2B,CAA3B,CACI,KAAKjC,KAAL,CAAWiC,aADf,CAEI/B,mBAASgC,0BANjB,kDASGhB,QATH,CADF,CAaD,CACD,GAAI,KAAKlB,KAAL,CAAWM,OAAf,CAAwB,CACtB,GAAM6B,yBAAmBP,UAAUnB,KAA7B,CAAN,CACA,GAAM2B,YACJ,KAAKpC,KAAL,CAAWqC,IAAX,EAAmB,KAAKrC,KAAL,CAAWsC,KAA9B,CACIpC,mBAASqC,iBADb,CAEIJ,YAAYK,IAHlB,CAIA,MACE,+BAAC,iBAAD,EACE,MAAO,CACL,CAAEC,UAAWN,YAAYO,MAAzB,CADK,CAELP,WAFK,CAGL,CAAEQ,WAAYvC,SAAd,CAAyBwC,cAAexC,SAAxC,CAHK,CADT,kDAOE,8BAAC,oCAAD,WACE,IAAK,KAAK4B,OADZ,CAEE,WAAYa,qCAAwBC,MAAxB,CACV,KAAK9C,KAAL,CAAW+C,kBAAX,EAAiChC,UAAUgC,kBADjC,CAEV,IAFU,CAFd,EAMMnB,SANN,oDAQE,8BAAC,iBAAD,EACE,MAAO,CAELoB,OAAOC,cAFF,CAGL,CACEN,WAAYR,YAAYQ,UAD1B,CAEEC,cAAeT,YAAYS,aAF7B,CAGEF,OAAQP,YAAYO,MAHtB,CAIEQ,SAAUd,UAJZ,CAHK,CADT,kDAYGlB,QAZH,CARF,CAPF,CADF,CAiCD,CACD,MACE,+BAAC,oCAAD,WACE,IAAK,KAAKc,OADZ,CAEE,QAAS,KAAKhC,KAAL,CAAWmD,OAFtB,CAGE,WACE,KAAKnD,KAAL,CAAWoD,WAAX,CACIP,qCAAwBC,MAAxB,CAA+B,aAA/B,CADJ,CAEID,qCAAwBC,MAAxB,CACE/B,UAAUgC,kBADZ,CAEE,KAFF,CANR,EAWMnB,SAXN,oDAaE,8BAAC,iBAAD,aAAUA,SAAV,oDAAsBV,QAAtB,CAbF,CADF,CAiBD,C,oBAlIkBE,gBAAMiC,a,EAArB1D,M,CACG2D,Y,CAAe,CACpBrC,MAAOsC,oBAAUC,MADG,C,CAoIxB7D,OAAO8D,SAAP,aACKC,8BAAiBD,SADtB,EAEEhD,MAAO8C,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOEvB,MAAOiB,oBAAUO,IAPnB,CAQEC,QAASR,oBAAUO,IARrB,CASEV,YAAaG,oBAAUO,IATzB,CAUEE,QAAST,oBAAUO,IAVrB,CAWEG,OAAQV,oBAAUO,IAXpB,CAYEI,QAASX,oBAAUO,IAZrB,CAaEK,KAAMZ,oBAAUO,IAblB,CAcE7D,SAAUsD,oBAAUO,IAdtB,CAeEM,SAAUb,oBAAUO,IAftB,CAgBExD,QAASiD,oBAAUO,IAhBrB,CAiBEO,MAAOd,oBAAUO,IAjBnB,CAkBEQ,MAAOf,oBAAUO,IAlBnB,CAmBES,OAAQhB,oBAAUO,IAnBpB,GAsBA,GAAMd,QAASrC,wBAAW6D,MAAX,CAAkB,CAC/BvB,eAAgB,CACdwB,WAAY,CADE,CAEdC,cAAe,KAFD,CAGdC,eAAgB,QAHF,CAIdC,WAAY,QAJE,CADe,CAAlB,CAAf,CASA,GAAMC,cAAe,0BACnB,mBADmB,CAEnB,EAFmB,CAGnBC,8BAHmB,EAInBnF,MAJmB,CAArB,C,QAKyBA,M,CAAhBkF,Y","file":"Button.js","sourcesContent":["/* eslint-disable new-cap */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableOpacity,\n  Platform,\n  View,\n  TouchableNativeFeedback,\n  StyleSheet\n} from 'react-native';\n\nimport { connectStyle } from '../theme/shoutem';\nimport variable from '../theme/variables/platform';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nimport { Text } from './Text';\n\n\nconst IS_IOS = Platform.OS === 'ios';\nconst IS_WEB = Platform.OS == 'web';\n\n\nclass Button extends React.PureComponent {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  setRoot(c){\n    this._root = c;\n  }\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: this.props.bordered\n          ? variable.buttonDefaultBorderWidth\n          : undefined,\n        borderRadius:\n          this.props.rounded && this.props.bordered\n            ? variable.borderRadiusLarge\n            : variable.buttonDefaultBorderRadius\n      }\n    };\n  }\n\n  prepareRootProps() {\n\n    const {style, ...others} = this.props;\n\n    return {\n      style: StyleSheet.flatten(StyleSheet.compose(this.getInitialStyle().borderedBtn, style)),\n      ...others\n    }\n\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    const children =\n      IS_IOS || !variables.buttonUppercaseAndroidText\n        ? this.props.children\n        : React.Children.map(this.props.children, child =>\n            child && child.type === Text\n              ? React.cloneElement(child, {\n                uppercase: true,\n                ...child.props\n              })\n              : child\n          );\n\n    const rootProps = this.prepareRootProps();\n\n    if (\n      IS_IOS ||\n      IS_WEB ||\n      variables.androidRipple === false ||\n      Platform.Version < 21\n    ) {\n      return (\n        <TouchableOpacity\n          {...rootProps}\n          ref={this.setRoot}\n          activeOpacity={\n            this.props.activeOpacity > 0\n              ? this.props.activeOpacity\n              : variable.buttonDefaultActiveOpacity\n          }\n        >\n          {children}\n        </TouchableOpacity>\n      );\n    }\n    if (this.props.rounded) {\n      const buttonStyle = { ...rootProps.style };\n      const buttonFlex =\n        this.props.full || this.props.block\n          ? variable.buttonDefaultFlex\n          : buttonStyle.flex;\n      return (\n        <View\n          style={[\n            { maxHeight: buttonStyle.height },\n            buttonStyle,\n            { paddingTop: undefined, paddingBottom: undefined }\n          ]}\n        >\n          <TouchableNativeFeedback\n            ref={this.setRoot}\n            background={TouchableNativeFeedback.Ripple(\n              this.props.androidRippleColor || variables.androidRippleColor,\n              true\n            )}\n            {...rootProps}\n          >\n            <View\n              style={[\n                // eslint-disable-next-line no-use-before-define\n                styles.childContainer,\n                {\n                  paddingTop: buttonStyle.paddingTop,\n                  paddingBottom: buttonStyle.paddingBottom,\n                  height: buttonStyle.height,\n                  flexGrow: buttonFlex\n                }\n              ]}\n            >\n              {children}\n            </View>\n          </TouchableNativeFeedback>\n        </View>\n      );\n    }\n    return (\n      <TouchableNativeFeedback\n        ref={this.setRoot}\n        onPress={this.props.onPress}\n        background={\n          this.props.transparent\n            ? TouchableNativeFeedback.Ripple('transparent')\n            : TouchableNativeFeedback.Ripple(\n                variables.androidRippleColor,\n                false\n              )\n        }\n        {...rootProps}\n      >\n        <View {...rootProps}>{children}</View>\n      </TouchableNativeFeedback>\n    );\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  block: PropTypes.bool,\n  primary: PropTypes.bool,\n  transparent: PropTypes.bool,\n  success: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  bordered: PropTypes.bool,\n  disabled: PropTypes.bool,\n  rounded: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  active: PropTypes.bool\n};\n\nconst styles = StyleSheet.create({\n  childContainer: {\n    flexShrink: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst StyledButton = connectStyle(\n  'NativeBase.Button',\n  {},\n  mapPropsToStyleNames\n)(Button);\nexport { StyledButton as Button };"]}