{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","props","color","checked","checkStyle","borderColor","checkboxBgColor","backgroundColor","checkboxDefaultColor","defaultProps","style","getInitialStyle","context","theme","variable","platformStyle","platform","c","_root","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","PLATFORM","IOS","MATERIAL","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"8sBAAA,qDACA,6DACA,yCACA,oFAEA,yCACA,2FACA,6EACA,2DACA,2E,qzDAEMA,CAAAA,Q,0QAKJ,yBAAgBC,SAAhB,CAA2B,CACzB,gBAAyB,KAAKC,KAA9B,CAAOC,KAAP,aAAOA,KAAP,CAAcC,OAAd,aAAcA,OAAd,CACA,MAAO,CACLC,UAAU,CAAE,CACVC,WAAW,CAAEH,KAAK,EAAIF,SAAS,CAACM,eADtB,CAEVC,eAAe,CACbJ,OAAO,GAAK,IAAZ,CACID,KAAK,EAAIF,SAAS,CAACM,eADvB,CAEIN,SAAS,CAACQ,oBALN,CADP,CAAP,CASD,C,gCAED,0BAAiBR,SAAjB,CAA4B,CAC1B,GAAMS,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,KAAKC,eAAL,CAAqBX,SAArB,EAAgCI,UADpB,CAArB,CAIA,MAAO,0BAAa,KAAKH,KAAlB,CAAyBQ,YAAzB,CAAP,CACD,C,sBACD,iBAAS,gBACP,GAAON,CAAAA,OAAP,CAAkB,KAAKF,KAAvB,CAAOE,OAAP,CACA,GAAMH,CAAAA,SAAS,CAAG,KAAKY,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDb,SADnC,CAEdc,iBAFJ,CAGA,GAAMC,CAAAA,aAAa,CAAGf,SAAS,CAACe,aAAhC,CACA,GAAMC,CAAAA,QAAQ,CAAGhB,SAAS,CAACgB,QAA3B,CACA,MACE,8BAAC,6BAAD,wBACE,GAAG,CAAE,aAACC,CAAD,QAAQ,CAAA,KAAI,CAACC,KAAL,CAAaD,CAArB,EADP,EAEM,KAAKE,gBAAL,CAAsBnB,SAAtB,CAFN,8EAGE,6BAAC,iBAAD,EACE,KAAK,CAAE,CACLE,KAAK,CACHC,OAAO,GAAK,IAAZ,CACIH,SAAS,CAACoB,iBADd,CAEIpB,SAAS,CAACQ,oBAJX,CAKLa,QAAQ,CAAErB,SAAS,CAACsB,gBALf,CAMLC,UAAU,CAAEvB,SAAS,CAACwB,gBANjB,CAOLC,SAAS,CAAEzB,SAAS,CAAC0B,qBAPhB,CAQLC,gBAAgB,CAAE3B,SAAS,CAAC4B,wBARvB,CADT,CAWE,IAAI,CACFZ,QAAQ,GAAKa,sBAASC,GAAtB,EAA6Bf,aAAa,GAAKc,sBAASE,QAAxD,CACI,eADJ,CAEI,cAdR,4EAHF,CADF,CAuBD,C,sBAvDoBC,gB,EAAjBjC,Q,CACGkC,Y,CAAe,CACpBpB,KAAK,CAAEqB,mBAAUC,MADG,C,CAyDxBpC,QAAQ,CAACqC,SAAT,0BACKC,8BAAiBD,SADtB,EAEE1B,KAAK,CAAEwB,mBAAUI,SAAV,CAAoB,CACzBJ,mBAAUC,MADe,CAEzBD,mBAAUK,MAFe,CAGzBL,mBAAUM,KAHe,CAApB,CAFT,CAOErC,OAAO,CAAE+B,mBAAUO,IAPrB,CAQEC,OAAO,CAAER,mBAAUS,IARrB,GAWA,GAAMC,CAAAA,cAAc,CAAG,0BACrB,qBADqB,CAErB,EAFqB,CAGrBC,6BAHqB,EAIrB9C,QAJqB,CAAvB,C","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {TouchableOpacity} from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\n\nimport {connectStyle} from '../theme/shoutem';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport {PLATFORM} from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object,\n  };\n\n  getInitialStyle(variables) {\n    const {color, checked} = this.props;\n    return {\n      checkStyle: {\n        borderColor: color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor,\n      },\n    };\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle,\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const {checked} = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={(c) => (this._root = c)}\n        {...this.prepareRootProps(variables)}>\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius,\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array,\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func,\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames,\n)(CheckBox);\n\nexport {StyledCheckBox as CheckBox};\n"],"file":"Checkbox.js"}